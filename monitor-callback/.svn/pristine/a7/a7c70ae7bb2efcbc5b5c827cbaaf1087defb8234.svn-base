package com.soholy.cb.controller;

import com.alibaba.fastjson.JSONObject;
import com.soholy.cb.entity.TDevice;
import com.soholy.cb.service.TDeviceIotService;
import com.soholy.cb.service.app.ManageService;
import com.soholy.cb.utils.R;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping(value = "/device")
public class ManageContaoller {

    @Autowired
    private TDeviceIotService tDeviceIotService;

    @Autowired
    private ManageService manageService;

    /**
     * http://localhost:9000/device/register/13385285115?deviceBrand=nm_test&deviceBatch=test
     * * @param imei 设备imei号
     *
     * @param deviceBrand 品牌信息 可没有
     * @param deviceBatch 批次信息 可没有
     * @return
     * @throws Exception
     * @imei
     * @Description (设备注册)
     */
    @RequestMapping(value = "/register/{imei}", method = RequestMethod.GET)
    public R register(@PathVariable(value = "imei") String imei,
                      String deviceBrand,
                      String deviceBatch
    ) throws Exception {

        if (StringUtils.isNotBlank(imei)) {
            return R.ok(tDeviceIotService.register(imei, deviceBrand, deviceBatch));
        }
        return R.ok();
    }


    /**
     * 设备删除 平台和数据库同删除
     *
     * @param deviceIotId
     * @return
     */
    @RequestMapping(value = "/logoutDevice/{deviceIotId}")
    public R logoutDevice(@PathVariable("deviceIotId") String deviceIotId) {
        try {
            tDeviceIotService.logout(deviceIotId);
            return R.ok();
        } catch (Exception e) {
            e.printStackTrace();
            return R.error(e.getMessage());
        }
    }

    /**
     * 查询设备信息
     *
     * @param imei
     * @param meta 是否查询原信息
     * @return
     */
    @RequestMapping(value = "/{imei}")
    public R info(@PathVariable("imei") String imei,
                  @RequestParam(value = "meta", required = false, defaultValue = "true") boolean meta) {
        try {
            List<TDevice> devices = tDeviceIotService.findDevicesByIotId(imei, 1);
            if (meta && devices != null && devices.size() == 1) {
                JSONObject rt = manageService.findDeviceInfo(devices.get(0).getDeviceIdIot());
                rt.put("meta",devices);
                return R.ok(rt);
            }
            return R.ok(devices);
        } catch (Exception e) {
            e.printStackTrace();
            return R.error(e.getMessage());
        }
    }


}
